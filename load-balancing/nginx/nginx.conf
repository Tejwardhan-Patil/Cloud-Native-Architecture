user www-data;
worker_processes auto;
pid /var/run/nginx.pid;
events {
    worker_connections 1024;
    multi_accept on;
    use epoll;
}

http {
    # Basic Settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    include /nginx/mime.types;
    default_type application/octet-stream;

    # Logging Settings
    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;

    # Gzip Compression
    gzip on;
    gzip_disable "msie6";
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_buffers 16 8k;
    gzip_http_version 1.1;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

    # Upstream Load Balancing Configuration
    upstream backend_servers {
        ip_hash;
        server backend1.website.com max_fails=3 fail_timeout=30s;
        server backend2.website.com max_fails=3 fail_timeout=30s;
        server backend3.website.com backup;
    }

    # Load Balancing with Sticky Sessions
    upstream sticky_servers {
        sticky;
        server backend1.website.com weight=3;
        server backend2.website.com;
        server backend3.website.com backup;
    }

    # SSL Settings
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers on;
    ssl_ciphers "EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH";
    ssl_dhparam /nginx/ssl/dhparam.pem;

    # Cache Settings
    proxy_cache_path /var/cache/nginx levels=1:2 keys_zone=STATIC:10m inactive=24h max_size=1g;
    proxy_cache_key "$scheme$request_method$host$request_uri";
    proxy_cache_valid 200 302 10m;
    proxy_cache_valid 404 1m;

    # SSL Server Block
    server {
        listen 443 ssl http2;
        server_name website.com;

        ssl_certificate /nginx/ssl/website.com.crt;
        ssl_certificate_key /nginx/ssl/website.com.key;

        add_header Strict-Transport-Security "max-age=63072000; includeSubdomains; preload";
        add_header X-Frame-Options DENY;
        add_header X-Content-Type-Options nosniff;

        access_log /var/log/nginx/ssl-access.log;
        error_log /var/log/nginx/ssl-error.log;

        location / {
            proxy_pass http://backend_servers;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Caching for Static Files
        location ~* \.(jpg|jpeg|png|gif|ico|css|js)$ {
            expires 30d;
            access_log off;
            add_header Cache-Control "public";
        }

        # Static content from upstream servers
        location /static/ {
            proxy_pass http://sticky_servers;
            proxy_cache STATIC;
            proxy_cache_bypass $http_cache_control;
            add_header X-Proxy-Cache $upstream_cache_status;
        }
    }

    # HTTP Redirect to HTTPS
    server {
        listen 80;
        server_name website.com;
        return 301 https://$host$request_uri;
    }

    # Performance Tweaks
    client_max_body_size 50M;
    client_body_timeout 12;
    client_header_timeout 12;
    send_timeout 10;
    keepalive_requests 100;
    reset_timedout_connection on;
    server_tokens off;

    # Security Tweaks
    ssl_session_timeout 1d;
    ssl_session_cache shared:SSL:50m;
    ssl_stapling on;
    ssl_stapling_verify on;
    resolver 8.8.8.8 8.8.4.4 valid=300s;
    resolver_timeout 5s;

    # Protect against DDoS
    limit_conn_zone $binary_remote_addr zone=addr:10m;
    limit_conn addr 100;
    limit_req_zone $binary_remote_addr zone=one:10m rate=5r/s;
    limit_req zone=one burst=10 nodelay;

    # Additional Configuration for Reverse Proxy
    proxy_connect_timeout 90;
    proxy_send_timeout 90;
    proxy_read_timeout 90;
    proxy_buffer_size 4k;
    proxy_buffers 16 8k;
    proxy_busy_buffers_size 16k;
    proxy_temp_file_write_size 64k;

    # WebSocket support
    map $http_upgrade $connection_upgrade {
        default upgrade;
        '' close;
    }

    server {
        listen 443 ssl http2;
        server_name ws.website.com;

        ssl_certificate /nginx/ssl/ws.website.com.crt;
        ssl_certificate_key /nginx/ssl/ws.website.com.key;

        location / {
            proxy_pass http://sticky_servers;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }
}